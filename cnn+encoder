{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ceoGF3hmF-i4","executionInfo":{"status":"ok","timestamp":1718374886730,"user_tz":-540,"elapsed":18649,"user":{"displayName":"­전우재 / 학생 / 자유전공학부","userId":"15209413021938568538"}},"outputId":"43621c98-6a6f-4bf1-bcba-58626c5fc308"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount(\"/content/drive\")"]},{"cell_type":"code","source":["import numpy as np\n","import torch\n","import torch.optim as optim\n","import torch.nn as nn\n","import torch.nn.functional as F\n","import math, copy, time\n","from torch.autograd import Variable\n","import matplotlib.pyplot as plt\n","import seaborn\n","from torch.utils.tensorboard import SummaryWriter\n","from torch.utils.data import Dataset\n","import tqdm\n","import yfinance as yf\n","from torch.utils.data import DataLoader\n","from torch.distributions import Categorical\n","\n","\n","seaborn.set_context(context=\"talk\")\n","%matplotlib inline"],"metadata":{"id":"sJkg1fBzHwvU","executionInfo":{"status":"ok","timestamp":1718374900310,"user_tz":-540,"elapsed":10971,"user":{"displayName":"­전우재 / 학생 / 자유전공학부","userId":"15209413021938568538"}}},"execution_count":3,"outputs":[]},{"cell_type":"markdown","source":["[Paper @](https://arxiv.org/pdf/2304.04912)"],"metadata":{"id":"Fu5bbaISITL0"}},{"cell_type":"markdown","source":["# Finance Data"],"metadata":{"id":"RblftDWdBBA7"}},{"cell_type":"code","source":["import yfinance as yf\n","\n","spx = yf.Ticker(\"^SPX\")\n","history = spx.history(period=\"max\")\n","close = history[\"Close\"]\n","close.plot()"],"metadata":{"id":"66Xf1lbMBEPi","executionInfo":{"status":"ok","timestamp":1718374950055,"user_tz":-540,"elapsed":2477,"user":{"displayName":"­전우재 / 학생 / 자유전공학부","userId":"15209413021938568538"}},"colab":{"base_uri":"https://localhost:8080/","height":477},"outputId":"899e2da9-0cb3-4431-e766-b79135cf074c"},"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: xlabel='Date'>"]},"metadata":{},"execution_count":4},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["close"],"metadata":{"id":"Cm-S4psrkZA1","executionInfo":{"status":"ok","timestamp":1718374950055,"user_tz":-540,"elapsed":14,"user":{"displayName":"­전우재 / 학생 / 자유전공학부","userId":"15209413021938568538"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"2f2f73b3-b86d-4e6c-f4c5-c0f60bb3b99e"},"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Date\n","1927-12-30 00:00:00-05:00      17.660000\n","1928-01-03 00:00:00-05:00      17.760000\n","1928-01-04 00:00:00-05:00      17.719999\n","1928-01-05 00:00:00-05:00      17.549999\n","1928-01-06 00:00:00-05:00      17.660000\n","                                ...     \n","2024-06-10 00:00:00-04:00    5360.790039\n","2024-06-11 00:00:00-04:00    5375.319824\n","2024-06-12 00:00:00-04:00    5421.029785\n","2024-06-13 00:00:00-04:00    5433.740234\n","2024-06-14 00:00:00-04:00    5413.770020\n","Name: Close, Length: 24230, dtype: float64"]},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["len(close)"],"metadata":{"id":"eTH5SEJik9MZ","executionInfo":{"status":"ok","timestamp":1718374950056,"user_tz":-540,"elapsed":13,"user":{"displayName":"­전우재 / 학생 / 자유전공학부","userId":"15209413021938568538"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"6d545f18-1ef8-4c40-d576-49d910c4f0fd"},"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["24230"]},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["data = close.round(2)\n","dates = data.index.strftime('%Y-%m-%d')\n","price = data.to_numpy()\n","d = [[price, dates] for price, dates in zip(price, dates)]\n","sd = d[0:10]\n","sd"],"metadata":{"id":"d3FAhL1ttPHY","executionInfo":{"status":"ok","timestamp":1718374950508,"user_tz":-540,"elapsed":463,"user":{"displayName":"­전우재 / 학생 / 자유전공학부","userId":"15209413021938568538"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"78190bb0-5433-438d-d11a-1730f4ab3727"},"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[[17.66, '1927-12-30'],\n"," [17.76, '1928-01-03'],\n"," [17.72, '1928-01-04'],\n"," [17.55, '1928-01-05'],\n"," [17.66, '1928-01-06'],\n"," [17.5, '1928-01-09'],\n"," [17.37, '1928-01-10'],\n"," [17.35, '1928-01-11'],\n"," [17.47, '1928-01-12'],\n"," [17.58, '1928-01-13']]"]},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["class StockDataset(Dataset):\n","    def __init__(self, data, T=45, train_flag=True):\n","        self.train_flag = train_flag\n","        self.data_train_ratio = 0.93\n","        self.T = T\n","        self.dates = data.index.strftime('%Y-%m-%d').to_numpy()\n","\n","        if train_flag:\n","            self.data_len = int(self.data_train_ratio * len(data))\n","            data_all = np.array(data)\n","            #print(data_all)\n","            self.mean = np.mean(data_all)\n","            self.std = np.std(data_all)\n","            self.max = np.max(data_all)\n","            self.min = np.min(data_all)\n","            data_all = (data_all - self.min) / (self.max - self.min)\n","            self.data = data_all[ : self.data_len]\n","\n","        else:\n","            self.data_len = int((1-self.data_train_ratio) * len(data))\n","            data_all = np.array(data)\n","            self.mean = np.mean(data_all)\n","            self.std = np.std(data_all)\n","            self.max = np.max(data_all)\n","            self.min = np.min(data_all)\n","            data_all = (data_all - self.min) / (self.max - self.min)\n","            #print(f\"{(len(data_all))} and {len(self.dates)}\")\n","            self.data = data_all[-self.data_len:]\n","            self.eval_dates = self.dates[-self.data_len:-self.T]\n","        #print(\"data len:{}\".format(self.data_len))\n","\n","    def __len__(self):\n","        return self.data_len-self.T\n","\n","    def __getitem__(self, idx):\n","        # Returns T days worth of data and the T+1th price of data\n","        #print(self.data[idx:idx+self.T+1])\n","        data = self.data[idx:idx+self.T]\n","        if self.data[idx+self.T] > data[-1]:\n","          label = np.array([1.0, 0.0])\n","        else:\n","          label = np.array([0.0, 1.0])\n","        return data, label"],"metadata":{"id":"cEy29nFXBcTD","executionInfo":{"status":"ok","timestamp":1718375087349,"user_tz":-540,"elapsed":367,"user":{"displayName":"­전우재 / 학생 / 자유전공학부","userId":"15209413021938568538"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["dataset_train = StockDataset(close)\n","mean = dataset_train.mean\n","std = dataset_train.std\n","dataset_val = StockDataset(close, train_flag=False)\n","\n","batch = 10\n","train_loader = DataLoader(dataset_train, batch_size=batch, shuffle=True)\n","val_loader = DataLoader(dataset_val, batch_size=batch, shuffle=False)\n","prices, labels = next(iter(val_loader))\n","for price, label in zip(prices, labels):\n","  print(f\"price: {price.shape} and label: {label}\")"],"metadata":{"id":"cAN2vDj2ktmt","executionInfo":{"status":"ok","timestamp":1718375297899,"user_tz":-540,"elapsed":765,"user":{"displayName":"­전우재 / 학생 / 자유전공학부","userId":"15209413021938568538"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"5334dec0-ba23-4a98-80ad-6d108adb07e7"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["price: torch.Size([45]) and label: tensor([1., 0.], dtype=torch.float64)\n","price: torch.Size([45]) and label: tensor([0., 1.], dtype=torch.float64)\n","price: torch.Size([45]) and label: tensor([1., 0.], dtype=torch.float64)\n","price: torch.Size([45]) and label: tensor([0., 1.], dtype=torch.float64)\n","price: torch.Size([45]) and label: tensor([1., 0.], dtype=torch.float64)\n","price: torch.Size([45]) and label: tensor([0., 1.], dtype=torch.float64)\n","price: torch.Size([45]) and label: tensor([1., 0.], dtype=torch.float64)\n","price: torch.Size([45]) and label: tensor([0., 1.], dtype=torch.float64)\n","price: torch.Size([45]) and label: tensor([0., 1.], dtype=torch.float64)\n","price: torch.Size([45]) and label: tensor([0., 1.], dtype=torch.float64)\n"]}]},{"cell_type":"markdown","source":["# Model"],"metadata":{"id":"GI4uKmUmI5w1"}},{"cell_type":"code","source":["class ConvKernel(nn.Module):\n","  def __init__(self):\n","    super(ConvKernel, self).__init__()\n","    self.conv = nn.Conv1d(in_channels=5, out_channels=512, kernel_size=1)\n","\n","  def forward(self, data):\n","    out = self.conv(data)\n","    out = out.transpose(1,2)\n","    return out\n","\n","data = torch.rand(64,5,9)\n","conv = ConvKernel()\n","out = conv(data)\n","print(out.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LnwYvFYsI6Vq","executionInfo":{"status":"ok","timestamp":1718375599566,"user_tz":-540,"elapsed":451,"user":{"displayName":"­전우재 / 학생 / 자유전공학부","userId":"15209413021938568538"}},"outputId":"f771dbcd-7ba2-4ca8-c2f5-c416bc36c58d"},"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["torch.Size([64, 9, 512])\n"]}]},{"cell_type":"code","source":["class PositionalEncoding(nn.Module):\n","    \"Implement the PE function.\"\n","    def __init__(self, d_model, dropout, max_len=5000):\n","        super(PositionalEncoding, self).__init__()\n","        self.dropout = nn.Dropout(p=dropout)\n","\n","        # Compute the positional encodings once in log space.\n","        pe = torch.zeros(max_len, d_model)\n","        #print(f\"pe shape: {pe.shape}\")\n","        position = torch.arange(0, max_len).unsqueeze(1)\n","        #print(f\"position shape: {position.shape}\")\n","        div_term = torch.exp(torch.arange(0, d_model, 2) *\n","                             -(math.log(10000.0) / d_model))\n","        #print(f\"div_term shape: {div_term.shape}\")\n","        pe[:, 0::2] = torch.sin(position * div_term)\n","        pe[:, 1::2] = torch.cos(position * div_term)\n","        pe = pe.unsqueeze(0)\n","        #print(f\"pe shape: {pe.shape}\")\n","        self.register_buffer('pe', pe)\n","\n","    def forward(self, x):\n","        pos = Variable(self.pe[:, :x.size(-2)], requires_grad=False)\n","        #print(f\"pos shape: {pos.shape}\")\n","        x = x + pos\n","        return self.dropout(x)\n","\n","pe = PositionalEncoding(512, 0.1)\n","pe_out = pe(out)\n","print(pe_out.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fcN44nklKG8T","executionInfo":{"status":"ok","timestamp":1718375691045,"user_tz":-540,"elapsed":406,"user":{"displayName":"­전우재 / 학생 / 자유전공학부","userId":"15209413021938568538"}},"outputId":"b23037f6-290c-463b-ba7b-9272a748534a"},"execution_count":19,"outputs":[{"output_type":"stream","name":"stdout","text":["torch.Size([64, 9, 512])\n"]}]},{"cell_type":"code","source":["class Encoder(nn.Module):\n","    \"Core encoder is a stack of N layers\"\n","    def __init__(self, layer, N):\n","        super(Encoder, self).__init__()\n","        self.layers = nn.ModuleList([copy.deepcopy(layer) for _ in range(N)])\n","        self.norm = nn.LayerNorm(layer.size)\n","\n","    def forward(self, x):\n","        \"Pass the input (and mask) through each layer in turn.\"\n","        for layer in self.layers:\n","            x = layer(x)\n","        return self.norm(x)"],"metadata":{"id":"T0UXMwpqx96Z","executionInfo":{"status":"ok","timestamp":1718376476454,"user_tz":-540,"elapsed":474,"user":{"displayName":"­전우재 / 학생 / 자유전공학부","userId":"15209413021938568538"}}},"execution_count":36,"outputs":[]},{"cell_type":"code","source":["class EncoderLayer(nn.Module):\n","    \"Encoder is made up of self-attn and feed forward (defined below)\"\n","    def __init__(self, size, self_attn, feed_forward, dropout):\n","        super(EncoderLayer, self).__init__()\n","        self.self_attn = self_attn\n","        self.feed_forward = feed_forward\n","        self.size = size\n","        self.norm = nn.LayerNorm(size)\n","        self.dropout = nn.Dropout(dropout)\n","\n","    def forward(self, x):\n","        \"Follow Figure 1 (left) for connections.\"\n","        #print(type(x))\n","        x = self.norm(x)\n","        mask = None\n","        attn = self.dropout(self.self_attn(x, x, x, mask))\n","        #print(f\"attn shape: {attn.shape} and x shape: {x.shape}\")\n","        x = x + attn\n","\n","        x = self.norm(x)\n","        x = x + self.dropout(self.feed_forward(x))\n","\n","        return x"],"metadata":{"id":"-Gzt0E_NyYzl","executionInfo":{"status":"ok","timestamp":1718376476454,"user_tz":-540,"elapsed":3,"user":{"displayName":"­전우재 / 학생 / 자유전공학부","userId":"15209413021938568538"}}},"execution_count":37,"outputs":[]},{"cell_type":"code","source":["class MultiHeadedAttention(nn.Module):\n","    def __init__(self, h, d_model, dropout=0.1):\n","        \"Take in model size and number of heads.\"\n","        super(MultiHeadedAttention, self).__init__()\n","        assert d_model % h == 0\n","        # We assume d_v always equals d_k\n","        self.d_k = d_model // h\n","        self.h = h\n","        self.linears = nn.ModuleList([copy.deepcopy(nn.Linear(d_model, d_model)) for _ in range(4)])\n","        self.attn = None\n","        self.dropout = nn.Dropout(p=dropout)\n","\n","    def forward(self, query, key, value, mask=None):\n","        \"Implements Figure 2\"\n","        if mask is not None:\n","            # Same mask applied to all h heads.\n","            #print(f\"mask size before unsqueeze: {mask.size()}\")\n","            mask = mask.unsqueeze(1)\n","            #print(f\"mask size after unsqueeze: {mask.size()}\")\n","        nbatches = query.size(0)\n","        #print(f\"nbatches: {nbatches}\")\n","\n","        # 1) Do all the linear projections in batch from d_model => h x d_k\n","        #print(f\"q,k,v size before linear projection: {query.size()} {key.size()} {value.size()}\")\n","        #print(f\"self.h: {self.h} and self.d_k: {self.d_k}\")\n","        query, key, value = \\\n","            [l(x).view(nbatches, -1, self.h, self.d_k).transpose(1, 2)\n","             for l, x in zip(self.linears, (query, key, value))]\n","        #print(f\"q,k,v size after linear projection: {query.size()} {key.size()} {value.size()}\")\n","\n","        # 2) Apply attention on all the projected vectors in batch.\n","        x, self.attn = self.attention(query, key, value, mask, self.dropout)\n","        #print(f\"x size after attention: {x.size()} and self.attn: {self.attn.size()}\")\n","\n","        # 3) \"Concat\" using a view and apply a final linear.\n","        x = x.transpose(1, 2).contiguous() \\\n","             .view(nbatches, -1, self.h * self.d_k)\n","        #print(f\"reshaped x: {x.shape}\")\n","        out = self.linears[-1](x)\n","        #print(f\"MHA final output shape: {out.shape}\")\n","        return out\n","\n","    def attention(self, query, key, value, mask=None, dropout=None):\n","        \"Compute 'Scaled Dot Product Attention'\"\n","        d_k = query.size(-1)\n","        #print(f\"d_k size: {d_k}\")\n","        #print(f\"query shape: {query.shape} and key shape: {key.shape}\")\n","        scores = torch.matmul(query, key.transpose(-2, -1)) \\\n","                / math.sqrt(d_k)\n","        #print(f\"scores: {scores.size()}\")\n","        #print(f\"mask shape: {mask.shape}\")\n","        if mask is not None:\n","            scores = scores.masked_fill(mask == 0, -1e9)\n","        p_attn = F.softmax(scores, dim = -1)\n","        #print(f\"p_attn: {p_attn.size()}\")\n","        if dropout is not None:\n","            p_attn = dropout(p_attn)\n","        #print(f\"p_attn after dropout: {p_attn.size()}\")\n","        #print(f\"value size: {value.size()}\")\n","        return torch.matmul(p_attn, value), p_attn"],"metadata":{"id":"T9BS_1xIzJhw","executionInfo":{"status":"ok","timestamp":1718376476454,"user_tz":-540,"elapsed":3,"user":{"displayName":"­전우재 / 학생 / 자유전공학부","userId":"15209413021938568538"}}},"execution_count":38,"outputs":[]},{"cell_type":"code","source":["class PositionwiseFeedForward(nn.Module):\n","    \"Implements FFN equation.\"\n","    def __init__(self, d_model, d_ff, dropout=0.1):\n","        super(PositionwiseFeedForward, self).__init__()\n","        self.w_1 = nn.Linear(d_model, d_ff)\n","        self.w_2 = nn.Linear(d_ff, d_model)\n","        self.dropout = nn.Dropout(dropout)\n","\n","    def forward(self, x):\n","        return self.w_2(self.dropout(F.relu(self.w_1(x))))"],"metadata":{"id":"M_tIEbeoMjxD","executionInfo":{"status":"ok","timestamp":1718376476454,"user_tz":-540,"elapsed":3,"user":{"displayName":"­전우재 / 학생 / 자유전공학부","userId":"15209413021938568538"}}},"execution_count":39,"outputs":[]},{"cell_type":"code","source":["attn = MultiHeadedAttention(8, 512)\n","ff = PositionwiseFeedForward(512, 2048, 0.1)\n","encoder = Encoder(EncoderLayer(512, attn, ff, 0.1), 6)\n","out = encoder(pe_out)\n","print(out.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VGYT-k_bMLm2","executionInfo":{"status":"ok","timestamp":1718376477717,"user_tz":-540,"elapsed":441,"user":{"displayName":"­전우재 / 학생 / 자유전공학부","userId":"15209413021938568538"}},"outputId":"2a7f7d4e-55d8-4f70-f300-37c26a0bec6f"},"execution_count":40,"outputs":[{"output_type":"stream","name":"stdout","text":["torch.Size([64, 9, 512])\n"]}]},{"cell_type":"code","source":["class StockModel(nn.Module):\n","  def __init__(self):\n","    super(StockModel, self).__init__()\n","    self.conv = ConvKernel()\n","    self.positional_encoding = PositionalEncoding(512, 0.1)\n","    attn = MultiHeadedAttention(8, 512)\n","    ff = PositionwiseFeedForward(512, 2048, 0.1)\n","    self.encoder = Encoder(EncoderLayer(512, attn, ff, 0.1), 6)\n","    self.classification_head = nn.Linear(512, 2)\n","    self.network = nn.Sequential(\n","        self.conv,\n","        self.positional_encoding,\n","        self.encoder,\n","        self.classification_head\n","    )\n","\n","  def forward(self, data):\n","    out = self.network(data)\n","    return out\n","\n","data = torch.randn(64, 45)\n","model = StockModel()\n","print(model(data).shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":336},"id":"hUIUwT64M8-S","executionInfo":{"status":"error","timestamp":1718376569627,"user_tz":-540,"elapsed":459,"user":{"displayName":"­전우재 / 학생 / 자유전공학부","userId":"15209413021938568538"}},"outputId":"2a57b4d9-300c-4a4c-d297-4e277a04bb1c"},"execution_count":41,"outputs":[{"output_type":"error","ename":"RuntimeError","evalue":"Given groups=1, weight of size [512, 5, 1], expected input[1, 64, 45] to have 5 channels, but got 64 channels instead","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mRuntimeError\u001b[0m                              Traceback (most recent call last)","\u001b[0;32m<ipython-input-41-7d622de79651>\u001b[0m in \u001b[0;36m<cell line: 23>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     21\u001b[0m \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrandn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m64\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m45\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     22\u001b[0m \u001b[0mmodel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mStockModel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 23\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_wrapped_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1530\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_compiled_call_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# type: ignore[misc]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1531\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1532\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1533\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1534\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_call_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1539\u001b[0m                 \u001b[0;32mor\u001b[0m \u001b[0m_global_backward_pre_hooks\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0m_global_backward_hooks\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1540\u001b[0m                 or _global_forward_hooks or _global_forward_pre_hooks):\n\u001b[0;32m-> 1541\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mforward_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1542\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1543\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-41-7d622de79651>\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, data)\u001b[0m\n\u001b[1;32m     16\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 18\u001b[0;31m     \u001b[0mout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnetwork\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     19\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mout\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     20\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_wrapped_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1530\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_compiled_call_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# type: ignore[misc]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1531\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1532\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1533\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1534\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_call_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1539\u001b[0m                 \u001b[0;32mor\u001b[0m \u001b[0m_global_backward_pre_hooks\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0m_global_backward_hooks\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1540\u001b[0m                 or _global_forward_hooks or _global_forward_pre_hooks):\n\u001b[0;32m-> 1541\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mforward_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1542\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1543\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/nn/modules/container.py\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, input)\u001b[0m\n\u001b[1;32m    215\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    216\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mmodule\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 217\u001b[0;31m             \u001b[0minput\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodule\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    218\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    219\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_wrapped_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1530\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_compiled_call_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# type: ignore[misc]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1531\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1532\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1533\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1534\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_call_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1539\u001b[0m                 \u001b[0;32mor\u001b[0m \u001b[0m_global_backward_pre_hooks\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0m_global_backward_hooks\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1540\u001b[0m                 or _global_forward_hooks or _global_forward_pre_hooks):\n\u001b[0;32m-> 1541\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mforward_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1542\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1543\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-15-ed7e38c0e2d0>\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, data)\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 7\u001b[0;31m     \u001b[0mout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      8\u001b[0m     \u001b[0mout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mout\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtranspose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mout\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_wrapped_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1530\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_compiled_call_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# type: ignore[misc]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1531\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1532\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1533\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1534\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_call_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1539\u001b[0m                 \u001b[0;32mor\u001b[0m \u001b[0m_global_backward_pre_hooks\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0m_global_backward_hooks\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1540\u001b[0m                 or _global_forward_hooks or _global_forward_pre_hooks):\n\u001b[0;32m-> 1541\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mforward_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1542\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1543\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/nn/modules/conv.py\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, input)\u001b[0m\n\u001b[1;32m    308\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    309\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mTensor\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mTensor\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 310\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_conv_forward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mweight\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbias\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    311\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    312\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/nn/modules/conv.py\u001b[0m in \u001b[0;36m_conv_forward\u001b[0;34m(self, input, weight, bias)\u001b[0m\n\u001b[1;32m    304\u001b[0m                             \u001b[0mweight\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbias\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstride\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    305\u001b[0m                             _single(0), self.dilation, self.groups)\n\u001b[0;32m--> 306\u001b[0;31m         return F.conv1d(input, weight, bias, self.stride,\n\u001b[0m\u001b[1;32m    307\u001b[0m                         self.padding, self.dilation, self.groups)\n\u001b[1;32m    308\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mRuntimeError\u001b[0m: Given groups=1, weight of size [512, 5, 1], expected input[1, 64, 45] to have 5 channels, but got 64 channels instead"]}]},{"cell_type":"code","source":[],"metadata":{"id":"343z5VS4N8Qs"},"execution_count":null,"outputs":[]}]}